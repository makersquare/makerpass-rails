# MakerPass-Rails

Quick way to get auth via makerpass on your rails app!

## Quick setup

Gemfile

```
gem "makerpass-rails", "~> 0.0.2"
```

run ```bundle install```

#### Route file  ```config/routes.rb```

```
mount MakerPass::Engine, at: "/"
```

#### Application Controller ```app/controllers/application_controllers.rb```

```
include MakerPass::Setup
make_auth User
```

### Requirements

Your app must have a user model with ```name```, ```email```, ```avatar_url``` and ```uid```. ```uid``` refers to the id MakerPass has assigned this user.


## Flow
*Login*:

Create a link to have a user login into makerpass: ```<%= link_to "Login", "/auth/makerpass" %>```

*Logout*:

Create a link to have a user logout: ```<%= link_to "Login", "/sessions", :method => :delete %>``

#### Method Helpers:
```current_user``` will return the user that is currently login in. If a user is not login, this method will return nil.

Use ```authenticate_user``` as a ```before_action``` option to protect certain controller actions from unauthorized users. I.e.:
```
class PrivateController < ApplicationController
    before_action :authenticate_user

    def secret
        #will not run if visited by unauthorized user.
    end
end
```

## Configuration

Does your app not have a User model? Instead it has a Student model? Or perhaps a Animal model that you would like to authenticate? Awesome! Instead of passing User to ```make_authable``` method pass in the model you would like to use!
I.e. if we had Student instead of User:

#### Application Controller ```app/controllers/application_controllers.rb```

```
include MakerPass::Setup
make_auth Student
```

The Student table MUST have email, name, avatar_url, and uid columns.

This will modify the helper methods. So instead of ```current_user``` you will get ```current_student```. Instead of ```authenticate_user``` you will get ```authenticate_student```.

#### Decide what to save

Let's say you want to override how a user is created when they login. Just overwrite ```#find_or_create_by_auth_hash``` on your authable model. i.e.:

```
class User < ActiveRecord::Base
  def self.find_or_create_by_auth_hash(hash)
    User.find_or_create_by(uid: hash["uid"])
    # do new stuff
  end
end
```

The hash that is passed in contains:
```
 {
   ui: 44,
   name: "Bob Smith",
   email: "BobbyESmithy@gmail.com"
 }
```




